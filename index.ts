import * as fs from "fs";
import * as path from "path";
import { parse } from "csv-parse";
import { start } from "repl";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

var routes: number[][] = [[]];

async function init(): Promise<any> {
  const routess: any = {
    1: [
      [30.63867839654099, 76.82250234187782],
      [30.713348723377372, 76.8062242871668],
      [30.68351485679853, 76.86757735537014],
      [30.713348723377372, 76.8062242871668],
      [30.63867839654099, 76.82250234187782],
    ],
    2: [
      [30.63867839654099, 76.82250234187782],
      [30.713348723377372, 76.8062242871668],
      [30.68351485679853, 76.86757735537014],
      [30.713348723377372, 76.8062242871668],
      [30.63867839654099, 76.82250234187782],
    ],
    3: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    4: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    5: [
      [30.63867839654099, 76.82250234187782],
      [30.713348723377372, 76.8062242871668],
      [30.68351485679853, 76.86757735537014],
      [30.713348723377372, 76.8062242871668],
      [30.63867839654099, 76.82250234187782],
    ],
    6: [
      [30.63867839654099, 76.82250234187782],
      [30.713348723377372, 76.8062242871668],
      [30.732217500212737, 76.77251002806602],
      [30.68351485679853, 76.86757735537014],
      [30.713348723377372, 76.8062242871668],
      [30.63867839654099, 76.82250234187782],
    ],
    7: [
      [30.63867839654099, 76.82250234187782],
      [30.713348723377372, 76.8062242871668],
      [30.68351485679853, 76.86757735537014],
      [30.713348723377372, 76.8062242871668],
      [30.63867839654099, 76.82250234187782],
    ],
    8: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    9: [
      [30.63867839654099, 76.82250234187782],
      [30.713348723377372, 76.8062242871668],
      [30.732217500212737, 76.77251002806602],
      [30.68351485679853, 76.86757735537014],
      [30.713348723377372, 76.8062242871668],
      [30.63867839654099, 76.82250234187782],
    ],
    10: [
      [30.63867839654099, 76.82250234187782],
      [30.713348723377372, 76.8062242871668],
      [30.68351485679853, 76.86757735537014],
      [30.713348723377372, 76.8062242871668],
      [30.63867839654099, 76.82250234187782],
    ],
    11: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.37539795796634, 76.78149073088414],
      [30.63867839654099, 76.82250234187782],
    ],
    12: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    13: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    14: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    15: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    16: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    17: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    18: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    19: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    20: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    21: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    22: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    23: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    24: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    25: [
      [30.63867839654099, 76.82250234187782],
      [30.732217500212737, 76.77251002806602],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    26: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    27: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.668094305703818, 76.78594586700788],
    ],
    28: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    29: [
      [30.63867839654099, 76.82250234187782],
      [30.732217500212737, 76.77251002806602],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    30: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    31: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    32: [
      [30.63867839654099, 76.82250234187782],
      [30.732217500212737, 76.77251002806602],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    33: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.37539795796634, 76.78149073088414],
      [30.63867839654099, 76.82250234187782],
    ],
    34: [
      [30.63867839654099, 76.82250234187782],
      [30.732217500212737, 76.77251002806602],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    35: [
      [30.63867839654099, 76.82250234187782],
      [30.732217500212737, 76.77251002806602],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    36: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.37539795796634, 76.78149073088414],
      [30.63867839654099, 76.82250234187782],
    ],
    37: [
      [30.63867839654099, 76.82250234187782],
      [30.732217500212737, 76.77251002806602],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    38: [
      [30.63867839654099, 76.82250234187782],
      [30.732217500212737, 76.77251002806602],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    39: [
      [30.63867839654099, 76.82250234187782],
      [30.732217500212737, 76.77251002806602],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    40: [
      [30.63867839654099, 76.82250234187782],
      [30.68351485679853, 76.86757735537014],
      [30.63867839654099, 76.82250234187782],
    ],
    41: [
      [30.63867839654099, 76.82250234187782],
      [30.668094305703818, 76.78594586700788],
      [30.732217500212737, 76.77251002806602],
    ],
    42: [
      [30.689283859110862, 76.87156294187885],
      [30.646189735985693, 76.82197334528504],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.689283859110862, 76.87156294187885],
    ],
    43: [
      [30.689283859110862, 76.87156294187885],
      [30.646189735985693, 76.82197334528504],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.689283859110862, 76.87156294187885],
    ],
    44: [
      [30.689283859110862, 76.87156294187885],
      [30.63867839654099, 76.82250234187782],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.63770218041452, 76.82257074002446],
      [30.689283859110862, 76.87156294187885],
    ],
    45: [
      [30.689283859110862, 76.87156294187885],
      [30.63867839654099, 76.82250234187782],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.63770218041452, 76.82257074002446],
      [30.689283859110862, 76.87156294187885],
    ],
    46: [
      [30.689283859110862, 76.87156294187885],
      [30.646189735985693, 76.82197334528504],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.689283859110862, 76.87156294187885],
    ],
    47: [
      [30.689283859110862, 76.87156294187885],
      [30.646189735985693, 76.82197334528504],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.689283859110862, 76.87156294187885],
    ],
    48: [
      [30.689283859110862, 76.87156294187885],
      [30.63867839654099, 76.82250234187782],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.63770218041452, 76.82257074002446],
      [30.689283859110862, 76.87156294187885],
    ],
    49: [
      [30.689283859110862, 76.87156294187885],
      [30.646189735985693, 76.82197334528504],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.689283859110862, 76.87156294187885],
    ],
    50: [
      [30.689283859110862, 76.87156294187885],
      [30.646189735985693, 76.82197334528504],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.689283859110862, 76.87156294187885],
    ],
    51: [
      [30.689283859110862, 76.87156294187885],
      [30.63867839654099, 76.82250234187782],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.63770218041452, 76.82257074002446],
      [30.689283859110862, 76.87156294187885],
    ],
    52: [
      [30.689283859110862, 76.87156294187885],
      [30.646189735985693, 76.82197334528504],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.689283859110862, 76.87156294187885],
    ],
    53: [
      [30.689283859110862, 76.87156294187885],
      [30.646189735985693, 76.82197334528504],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.689283859110862, 76.87156294187885],
    ],
    54: [
      [30.689283859110862, 76.87156294187885],
      [30.63867839654099, 76.82250234187782],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.63770218041452, 76.82257074002446],
      [30.689283859110862, 76.87156294187885],
    ],
    55: [
      [30.689283859110862, 76.87156294187885],
      [30.646189735985693, 76.82197334528504],
      [30.674905344605826, 76.74105831304233],
      [30.726873012035217, 76.76681596886249],
      [30.689283859110862, 76.87156294187885],
    ],
  };
var text = "date";
  for (var i = 1; i <= 2; i++) {
    routes = routess[i];
    console.log("route" + routes);
    await new Promise((f) => setTimeout(f, 2500));
    initMap();
    document.getElementById('veh-no').innerHTML = text;
    document.getElementById('center-text').innerHTML = text;
    document.getElementById('bottom-left').innerHTML = text;
    document.getElementById('bottom-right').innerHTML = text;


  }
}


  

function initMap(): void {
  const route: any = routes;
  console.log(route);
  const journey: any = journeyConstructor(route);
  const directionsRenderer = new google.maps.DirectionsRenderer({
    suppressMarkers: false,
    markerOptions: {
      visible: true,
      optimized: false,
      clickable: true,
      icon: "https://upload.wikimedia.org/wikipedia/commons/d/d1/Google_Maps_pin.svg",
    },
    draggable: true,
    polylineOptions: {
      strokeColor: "#4285F4",
      strokeWeight: 5,
      strokeOpacity: 0.8,
    },
    preserveViewport: false,
  });
  const directionsService = new google.maps.DirectionsService();
  console.log("j origin" + JSON.stringify(journey.origin));
  const map = new google.maps.Map(
    document.getElementById("map") as HTMLElement,
    {
      zoom: 250,
      center: journey.origin,
    }
  );

  directionsRenderer.setMap(map);

  journeyConstructor(route);
  calculateAndDisplayRoute(directionsService, directionsRenderer, journey);
  (document.getElementById("mode") as HTMLInputElement).addEventListener(
    "change",
    () => {
      calculateAndDisplayRoute(directionsService, directionsRenderer, journey);
    }
  );
}

function randomInRange(min, max) {
  return Math.random() < 0.5
    ? (1 - Math.random()) * (max - min) + min
    : Math.random() * (max - min) + min;
}

function latlongConverter(latlong: any) {
  console.log(latlong);
  try {
    const lat: number = latlong[0];
    const long: number = latlong[1];
    const latlongArray: any = { lat: lat, lng: long };
    return latlongArray;
  } catch (e) {
    console.log(e);
  }
}

function randomWaypoints(randomWayPoints: any) {
  const randomWaypointsArray: any = [];

  for (let i = 0; i < randomWayPoints.length; i++) {
    randomWaypointsArray.push({
      location: latlongConverter(randomWayPoints[i]),
      stopover: true,
    });
  }

  return randomWaypointsArray;
}

function journeyConstructor(journeyArray: any) {
  const startpoint: number[] = journeyArray[0];
  console.log("start" + journeyArray[0]);
  const endpoint: number[] = journeyArray[journeyArray.length - 1];
  console.log(endpoint);
  const waypoints: number[] = journeyArray.slice(1, -1);
  console.log(waypoints);
  const waypointsArray: any = [];

  for (let i = 0; i < waypoints.length; i++) {
    console.log("way points" + waypoints[i]);

    var decision = Math.random();

    console.log(
      "changed randomness " +
        randomInRange(startpoint[0], endpoint[0]) +
        "  " +
        randomInRange(startpoint[1], endpoint[1]) +
        "unchanged randomness  " +
        waypoints[i]
    );

    for (let f = 0; f < randomInRange(1, 2); f++) {
      {
        waypointsArray.push({
          location: latlongConverter([
            randomInRange(startpoint[0], startpoint[0] + 0.03),
            randomInRange(startpoint[1], startpoint[1] + 0.03),
          ]),
          stopover: false,
        });
      }
    }

    waypointsArray.push({
      location: latlongConverter(waypoints[i]),
      stopover: false,
    });
  }

  const proccessed: any = {
    origin: latlongConverter(startpoint),
    destination: latlongConverter(endpoint),
    waypoints: waypointsArray,
  };

  return proccessed;
}

function calculateAndDisplayRoute(
  directionsService: google.maps.DirectionsService,
  directionsRenderer: google.maps.DirectionsRenderer,
  journeyArray: any
) {
  const selectedMode = (document.getElementById("mode") as HTMLInputElement)
    .value;

  directionsService
    .route({
      origin: journeyArray.origin, // Haight.
      destination: journeyArray.destination, // Ocean Beach.
      waypoints: journeyArray.waypoints,
      // Note that Javascript allows us to access the constant
      // using square brackets and a string value as its
      // "property."
      travelMode: google.maps.TravelMode["DRIVING"],
    })
    .then((response) => {
      directionsRenderer.setDirections(response);
    })
    .catch((e) => window.alert("Directions request failed due to " + e));
}

declare global {
  interface Window {
    init: () => void;
  }
}
window.init = init;
export {};
function delay(arg0: number) {
  throw new Error("Function not implemented.");
}
